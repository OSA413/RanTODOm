{"version":3,"sources":["app/StorageProvider.tsx","app/DataProvider.tsx","resources/plus.svg","app/overlay.tsx","app/List/List.tsx","app/header/header.tsx","app/Settings/Settings.tsx","app/main.tsx","App.tsx","reportWebVitals.tsx","index.tsx"],"names":["StorageType","StorageProvider","storageType","localstorage","storage","Init","localStorageType","localStorage","getItem","localStorageProvider","LoadData","SaveData","list","ImportData","forceUpdate","fileHandle","document","createElement","type","onchange","files","file","reader","FileReader","readAsText","onload","e","target","result","data","Papa","parse","toString","flat","filter","x","DataProvider","Table","elements","map","desc","i","id","description","Get","onerror","console","error","click","ExportData","csvText","unparse","blob","Blob","saveAs","JSON","setItem","stringify","SelectedIndex","Add","element","log","Math","round","random","Number","MAX_SAFE_INTEGER","push","Delete","splice","findIndex","Overlay","update","setFocus","setSettingsVisible","ref","current","focus","input","createRef","addItem","value","trim","selectRandom","length","className","placeholder","autoFocus","onKeyPress","key","onBlur","setTimeout","includes","activeElement","tagName","onClick","src","plus","alt","TodoList","useReducer","index","undefined","TodoElement","Header","setShown","window","open","Settings","shown","href","Main","useState","settingsVisible","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e8c534f5.chunk.js","sourcesContent":["import { List } from \"./interfaces/ListInterface\";\r\nimport { saveAs } from \"file-saver\";\r\n\r\nimport Papa from \"papaparse\";\r\nimport DataProvider from \"./DataProvider\";\r\n\r\nenum StorageType {\r\n    \"localstorage\"\r\n}\r\n\r\ninterface Storage {\r\n    LoadData(): List;\r\n    SaveData(list :List): void;\r\n}\r\n\r\nclass StorageProvider {\r\n    static storageType = StorageType.localstorage;\r\n    static storage?: Storage;\r\n\r\n    static Init = () => {\r\n        let localStorageType = localStorage.getItem(\"storageType\");\r\n        if (localStorageType !== null) {\r\n            StorageProvider.storageType = StorageType[localStorageType as keyof typeof StorageType];\r\n            switch (StorageProvider.storageType) {\r\n            }\r\n        }\r\n        else {\r\n            StorageProvider.storage = new localStorageProvider();\r\n        }\r\n    }\r\n\r\n    static LoadData = () => StorageProvider.storage?.LoadData();\r\n    static SaveData = (list: List) => StorageProvider.storage?.SaveData(list);\r\n\r\n    static ImportData = (forceUpdate: ()=>any) => {\r\n        let fileHandle = document.createElement(\"input\") as HTMLInputElement;\r\n        fileHandle.type = \"file\";\r\n        fileHandle.onchange = () => {\r\n            if (!fileHandle.files || !fileHandle.files[0]) return;\r\n            let file = fileHandle.files[0];\r\n            let reader = new FileReader();\r\n            reader.readAsText(file, \"UTF-8\");\r\n            reader.onload = (e) => {\r\n                if (!StorageProvider.storage) return;\r\n                if (!e.target?.result) return;\r\n                let data = Papa.parse<string>(e.target.result.toString()).data.flat().filter(x => x);\r\n                DataProvider.Table.list = {elements: data.map((desc, i) => {return {id: i, description: desc}})};\r\n                StorageProvider.SaveData(DataProvider.Table.Get());\r\n                forceUpdate();\r\n            }\r\n            reader.onerror = (e) => console.error(e);            \r\n        }\r\n        fileHandle.click();\r\n    }\r\n\r\n    static ExportData = () => {\r\n        if (!StorageProvider.storage) return;\r\n        let list = StorageProvider.storage?.LoadData();\r\n        let csvText = Papa.unparse(list.elements.map(e => [e.description]));\r\n        var blob = new Blob([csvText], {type: \"text/csv;charset=utf-8\"});\r\n        saveAs(blob, \"My RanTODOm list.csv\");\r\n    }\r\n}\r\n\r\nclass localStorageProvider implements Storage {\r\n    LoadData = () :List =>{\r\n        return JSON.parse(localStorage.getItem(\"list\") ?? \"{ \\\"elements\\\": []}\");\r\n    }\r\n\r\n    SaveData = (list: List) => {\r\n        localStorage.setItem(\"list\", JSON.stringify(list));\r\n    }\r\n}\r\n\r\nexport default StorageProvider;","import { ListElement, List } from \"./interfaces/ListInterface\";\r\nimport StorageProvider from \"./StorageProvider\";\r\n\r\n\r\nclass Table {\r\n    static list: List;\r\n    static SelectedIndex: number|undefined;\r\n    static Get = () => Table.list;\r\n    static Add = (element: ListElement|string) => {\r\n        console.log(element);\r\n        if (typeof element === \"string\")\r\n            element = {description: element, id: Math.round(Math.random() * Number.MAX_SAFE_INTEGER)};\r\n\r\n        Table.list.elements.push(element);\r\n        StorageProvider.SaveData(Table.Get());\r\n    }\r\n    static Delete = (id: ListElement[\"id\"]) => {\r\n        Table.list.elements.splice(Table.list.elements.findIndex(x => x.id === id), 1);\r\n        StorageProvider.SaveData(Table.Get());\r\n    }\r\n\r\n    static Init = (list?: List) => {\r\n        Table.list = list ?? { elements: []};\r\n    }\r\n}\r\n\r\nclass DataProvider {\r\n    static Table = Table;\r\n\r\n    static Init = () => {\r\n        StorageProvider.Init();\r\n        Table.Init(StorageProvider.LoadData());\r\n    } \r\n}\r\n\r\nexport default DataProvider;","export default __webpack_public_path__ + \"static/media/plus.86fba113.svg\";","import { createRef } from \"react\";\r\nimport DataProvider from \"./DataProvider\";\r\n\r\nimport plus from \"./../resources/plus.svg\";\r\n\r\nconst Overlay = ({update, setSettingsVisible}: {update: ()=>any, setSettingsVisible: (arg: boolean)=>any}) => {\r\n    const setFocus = (ref: React.RefObject<HTMLInputElement>) => ref.current?.focus();\r\n    const input = createRef<HTMLInputElement>();\r\n\r\n    const focus = () => setTimeout(() => {\r\n        if ([\"INPUT\", \"SELECT\"].includes(document.activeElement?.tagName ?? \"\")) return;\r\n        setFocus(input);\r\n    }, 500)\r\n\r\n    const addItem = (): boolean => {\r\n        if (input.current === null) return false;\r\n\r\n        let text = input.current.value.trim();\r\n        if (text === \"\") return false;\r\n\r\n        DataProvider.Table.Add(input.current.value);\r\n        input.current.value = \"\";\r\n        setFocus(input);\r\n        update();\r\n        return true;\r\n    }\r\n\r\n    const selectRandom = () => {\r\n        DataProvider.Table.SelectedIndex = Math.round(Math.random() * (DataProvider.Table.Get().elements.length - 1));\r\n        update();\r\n    }\r\n\r\n    return (\r\n        <div className=\"w-full fixed bottom-4 px-4 flex gap-4\">\r\n            <input type=\"text\" className=\"input-bar\" placeholder=\"Enter TODO text\" ref={input} autoFocus\r\n            onKeyPress={e => e.key === \"Enter\" && (addItem() || selectRandom())}\r\n            onBlur={focus}/>\r\n            <div className=\"overlay-button\" onClick={selectRandom}>🎲</div>\r\n            <div className=\"overlay-button\" onClick={addItem}><img src={plus} alt=\"+\"/></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Overlay;","import React, { useReducer } from \"react\"\r\nimport DataProvider from \"../DataProvider\"\r\nimport { ListElement } from \"../interfaces/ListInterface\"\r\n\r\nconst TodoElement = (element: ListElement, index: number, forceUpdate: React.DispatchWithoutAction) => {\r\n    const del = () => {\r\n        if (DataProvider.Table.SelectedIndex === index)\r\n            DataProvider.Table.SelectedIndex = undefined;\r\n        DataProvider.Table.Delete(element.id);\r\n        forceUpdate();\r\n    }\r\n\r\n    return (\r\n        <div key={index}\r\n            className={\"w-full h-16 my-2 rounded-xl text-3xl flex items-center px-4 \" +\r\n            (DataProvider.Table.SelectedIndex === index ? \"bg-gray-300\" : \"bg-gray-100\")}>\r\n            <div className=\"w-12 text-right\">{index + 1}</div>\r\n            <div className=\"w-0.5 h-5/6 bg-gray-400 mx-3\"/>\r\n            <div className=\"\">{element.description}</div>\r\n            <div className=\"ml-auto select-none cursor-pointer\"\r\n            onClick={del}>❌</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TodoList = () => {\r\n    const [, forceUpdate] = useReducer(x => x + 1, 0);\r\n    let elements = DataProvider.Table.Get().elements.map((x, i) => TodoElement(x, i, forceUpdate))\r\n\r\n    return (\r\n        <div className=\"px-4\">\r\n            {elements}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList;","const Header = ({setShown}:{setShown: (x:boolean)=>any}) => {\r\n    const donate = () => {\r\n        window.open(\"https://ko-fi.com/osa413\");\r\n    }\r\n    \r\n    const showSettings = () => {\r\n        setShown(true);\r\n    }\r\n    \r\n    return (\r\n        <div className=\"w-full h-16 mb-4 flex bg-blue-400 justify-between\">\r\n            <div className=\"text-white font-bold self-center text-center text-xl mx-4 p-2 bg-blue-700 rounded-lg cursor-pointer\"\r\n            onClick={showSettings}>⚙ Settings</div>\r\n            <div className=\"text-white font-bold self-center text-center text-5xl select-none\">RanTODOm</div>\r\n            <div className=\"text-white font-bold self-center text-center text-xl mx-4 p-2 bg-red-400 rounded-lg cursor-pointer\"\r\n            onClick={donate}>☕ Donate</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import StorageProvider from \"../StorageProvider\";\r\n\r\nconst Settings = ({shown, setShown: setShown, update}: {shown: boolean, setShown:(x:boolean)=>any, update: ()=>any}): JSX.Element => {\r\n    if (!shown) return <></>\r\n    return (\r\n        <div className=\"z-10 w-96 h-4/5 border-2 rounded-lg bg-white fixed inset-1/2 transform -translate-x-1/2 -translate-y-1/2 p-4\">\r\n            <div className=\"absolute top-2 right-2 cursor-pointer\" onClick={()=>setShown(false)}>❌</div>\r\n            <div className=\"flex flex-col gap-2\">\r\n                <div className=\"text-4xl font-bold mx-auto text-center\">Data</div>\r\n                <div className=\"text-xl flex justify-between items-center\">\r\n                    <div>Import CSV file</div>\r\n                    <div className=\"text-white font-bold self-center text-center text-base p-2 bg-blue-700 rounded-lg cursor-pointer\"\r\n                    onClick={() => StorageProvider.ImportData(update)}>Select a file...</div>\r\n                </div>\r\n                <div className=\"text-xl flex justify-between items-center\">\r\n                    <div>Export CSV file</div>\r\n                    <div className=\"text-white font-bold self-center text-center text-base p-2 bg-blue-700 rounded-lg cursor-pointer\"\r\n                    onClick={StorageProvider.ExportData}>Download CSV</div>\r\n                </div>\r\n                <hr/>\r\n                <div className=\"mx-auto text-blue-800 underline\"><a target=\"_blank\" href=\"https://github.com/OSA413/RanTODOm\">Visit Repository</a></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import Overlay from \"./overlay\";\r\nimport TodoList from \"./List/List\";\r\nimport Header from \"./header/header\";\r\nimport { useReducer, useState } from \"react\";\r\nimport Settings from \"./Settings/Settings\";\r\n\r\nconst Main = () => {\r\n    const [, forceUpdate] = useReducer(x => x + 1, 0);\r\n    const [settingsVisible, setSettingsVisible] = useState(false);\r\n\r\n    return (\r\n        <div>\r\n            <Settings shown={settingsVisible} setShown={setSettingsVisible} update={forceUpdate}/>\r\n            <Overlay update={forceUpdate} setSettingsVisible={setSettingsVisible}/>\r\n            <Header setShown={setSettingsVisible}/>\r\n            <TodoList/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main","import Main from \"./app/main\";\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry: ReportHandler | undefined = undefined) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport DataProvider from './app/DataProvider';\nDataProvider.Init();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}